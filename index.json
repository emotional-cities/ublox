{
  "api/EmotionalCities.uBlox.Device.html": {
    "href": "api/EmotionalCities.uBlox.Device.html",
    "title": "Class Device",
    "keywords": "Class Device Represents an operator that creates a connection to the UBX device at the specified serial port. Inheritance Object Device Namespace : EmotionalCities.uBlox Assembly : EmotionalCities.uBlox.dll Syntax public class Device : Source<UbxPacket> Properties | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the UBX device. Declaration [TypeConverter(typeof(Device.PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Creates a connection to the UBX device at the specified serial port and returns an observable sequence of messages streaming from the device. Declaration public override IObservable<UbxPacket> Generate() Returns Type Description IObservable < UbxPacket > The sequence of UbxPacket messages transmitted by the device."
  },
  "api/EmotionalCities.uBlox.FileDevice.html": {
    "href": "api/EmotionalCities.uBlox.FileDevice.html",
    "title": "Class FileDevice",
    "keywords": "Class FileDevice Represents an operator which produces an observable sequence of UBX messages from a previously recorded data file. Inheritance Object FileDevice Namespace : EmotionalCities.uBlox Assembly : EmotionalCities.uBlox.dll Syntax public class FileDevice : Source<UbxPacket> Constructors | Improve this Doc View Source FileDevice() Initializes a new instance of the FileDevice class. Declaration public FileDevice() Properties | Improve this Doc View Source FileName Gets or sets the path to the binary file containing UBX messages to playback. Declaration public string FileName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Opens the specified file name and returns the observable sequence of UBX messages stored in the binary file. Declaration public override IObservable<UbxPacket> Generate() Returns Type Description IObservable < UbxPacket > The observable sequence of UBX messages stored in the binary file."
  },
  "api/EmotionalCities.uBlox.html": {
    "href": "api/EmotionalCities.uBlox.html",
    "title": "Namespace EmotionalCities.uBlox",
    "keywords": "Namespace EmotionalCities.uBlox Classes Device Represents an operator that creates a connection to the UBX device at the specified serial port. FileDevice Represents an operator which produces an observable sequence of UBX messages from a previously recorded data file. UbxException Represents errors that are reported by UBX devices at runtime. UbxPacket Represents a single message in the UBX protocol. Enums MessageClass Specifies the class ID of a UBX message. MessageId Specifies the ID of a UBX message. PortInputProtocols Specifies which input protocols are active in a specified UART port. PortOutputProtocols Specifies which output protocols are active in a specified UART port. UartPort Specifies the UART port identifier number."
  },
  "api/EmotionalCities.uBlox.MessageClass.html": {
    "href": "api/EmotionalCities.uBlox.MessageClass.html",
    "title": "Enum MessageClass",
    "keywords": "Enum MessageClass Specifies the class ID of a UBX message. Namespace : EmotionalCities.uBlox Assembly : EmotionalCities.uBlox.dll Syntax public enum MessageClass : byte Fields Name Description ACK Acknowledgement and negative acknowledgement messages AID AssistNow aiding messages: Ephemeris, Almanac, other A-GPS data input CFG Configuration and command messages: Set Dynamic Model, Set DOP Mask, Set Baud Rate, etc. ESF External sensor fusion messages INF Information messages: Printf-Style Messages, with IDs such as Error, Warning, Notice LOG Logging messages MGA GNSS Assistance (A-GNSS) messages MON Monitoring messages: Comunication Status, CPU Load, Stack Usage, Task Status NAV Navigation solution messages: Position, Speed, Time, Acc, Heading, DOP, SVs used RXM Receiver manager messages: Satellite Status, RTC Status SEC Security messages TIM Timing messages: Timepulse Output, Timemark Results UPD Firmware update messages"
  },
  "api/EmotionalCities.uBlox.MessageId.html": {
    "href": "api/EmotionalCities.uBlox.MessageId.html",
    "title": "Enum MessageId",
    "keywords": "Enum MessageId Specifies the ID of a UBX message. Namespace : EmotionalCities.uBlox Assembly : EmotionalCities.uBlox.dll Syntax public enum MessageId : ushort Fields Name Description ACK_ACK Message acknowledged (Output) ACK_NAK Message not acknowledged (Output) CFG_ANT Antenna control settings (Get/set) CFG_BATCH Data batching configuration (Get/set) CFG_CFG Clear, save and load configurations (Command) CFG_DAT User-defined datum (Get/set) CFG_GEOFENCE Geofencing configuration (Get/set) CFG_GNSS GNSS system configuration (Get/set) CFG_INF Information message configuration for one protocol (Get/set/poll request) CFG_ITFM Jamming/interference monitor configuration (Get/set) CFG_LOGFILTER Data logger configuration (Get/set) CFG_MSG Message configuration and message rate (Get/set/poll request) CFG_NAV5 Navigation engine settings (Get/set) CFG_NAVX5 Navigation engine expert settings (Get/set) CFG_NMEA Extended NMEA protocol configuration V1 (Get/set) CFG_ODO Odometer, low-speed COG engine settings (Get/set) CFG_PM2 Extended power management configuration (Get/set) CFG_PMS Power mode setup (Get/set) CFG_PRT Port configuration for UART, USB, SPI or I2C (DDC) port (Get/set/poll request) CFG_PWR Put receiver in a defined power state (Set) CFG_RATE Navigation/measurement rate settings (Get/set) CFG_RINV Contents of remote inventory (Get/set) CFG_RST Reset receiver / Clear backup data structures (Command) CFG_RXM RXM configuration (Get/set) CFG_SBAS SBAS configuration (Get/set) CFG_TP5 Time pulse parameters (Get/set) CFG_USB USB configuration (Get/set) CFG_VALDEL Delete configuration item values (with or without transaction) (Set) CFG_VALGET Get configuration items (Poll request) CFG_VALSET Set configuration item values (with or without transaction) (Set) ESF_ALG IMU alignment information (Periodic/polled) ESF_INS Vehicle dynamics information (Periodic/polled) ESF_MEAS External sensor fusion measurements (Input/output) ESF_RAW Raw sensor measurements (Output) ESF_STATUS External sensor fusion status (Periodic/polled) INF_DEBUG ASCII output with debug contents (Output) INF_ERROR ASCII output with error contents (Output) INF_NOTICE ASCII output with informational contents (Output) INF_TEST ASCII output with test contents (Output) INF_WARNING ASCII output with warning contents (Output) LOG_BATCH Batched data (Polled) LOG_CREATE Create log file (Command) LOG_ERASE Erase logged data (Command) LOG_FINDTIME Find index of a log entry based on a given time (Input/output) LOG_INFO Poll for log information (Poll request/output) LOG_RETRIEVE Request log data (Command) LOG_RETRIEVEBATCH Request batch data (Command) LOG_RETRIEVEPOS Position fix log entry (Output) LOG_RETRIEVEPOSEXTRA Odometer log entry (Output) LOG_RETRIEVESTRING Byte string log entry (Output) LOG_STRING Store arbitrary string in on-board flash (Command) MGA_ACK Multiple GNSS acknowledge message (Output) MGA_ANO Multiple GNSS AssistNow Offline assistance (Input) MGA_BDS BeiDou ephemeris, almanac, health, UTC, ionosphere assistance (Input) MGA_DBD Navigation database dump entry (Input/output/poll request) MGA_GAL Galileo ephemeris, almanac, GPS time offset, UTC assistance (Input) MGA_GLO GLONASS ephemeris, almanac, auxiliary time offset assistance (Input) MGA_GPS GPS ephemeris, almanac, health, UTC, ionosphere assistance (Input) MGA_INI Initial position, time, clock drift, frequency, and earth orientation parameters assistance (Input) MGA_QZSS QZSS ephemeris, almanac, health assistance (Input) MON_BATCH Data batching buffer status (Polled) MON_COMMS Communication port information (Periodic/polled) MON_GNSS Information message major GNSS selection (Polled) MON_HW Hardware status (Periodic/polled) MON_HW2 Extended hardware status (Periodic/polled) MON_HW3 I/O pin status (Periodic/polled) MON_IO I/O system status (Periodic/polled) MON_MSGPP Message parse and process status (Periodic/polled) MON_PATCH Installed patches (Polled) MON_RF RF information (Periodic/polled) MON_RXBUF Receiver buffer status (Periodic/polled) MON_RXR Receiver status information (Output) MON_SPAN Signal characteristics (Periodic/polled) MON_TXBUF Transmitter buffer status (Periodic/polled) MON_VER Receiver and software version (Polled) NAV_ATT Attitude solution (Periodic/polled) NAV_CLOCK Clock solution (Periodic/polled) NAV_COV Covariance matrices (Periodic/polled) NAV_DOP Dilution of precision (Periodic/polled) NAV_EELL Position error ellipse parameters (Periodic/polled) NAV_EOE End of epoch (Periodic) NAV_GEOFENCE Geofencing status (Periodic/polled) NAV_HPPOSECEF High precision position solution in ECEF (Periodic/polled) NAV_HPPOSLLH High precision geodetic position solution (Periodic/polled) NAV_ODO Odometer solution (Periodic/polled) NAV_ORB GNSS orbit database info (Periodic/polled) NAV_POSECEF Position solution in ECEF (Periodic/polled) NAV_POSLLH Geodetic position solution (Periodic/polled) NAV_PVAT Navigation position velocity attitude time solution (Periodic/polled) NAV_PVT Navigation position velocity time solution (Periodic/polled) NAV_RELPOSNED Relative positioning information in NED frame (Periodic/polled) NAV_RESETODO Reset odometer (Command) NAV_SAT Satellite information (Periodic/polled) NAV_SBAS SBAS status data (Periodic/polled) NAV_SIG Signal information (Periodic/polled) NAV_SLAS QZSS L1S SLAS status data (Periodic/polled) NAV_STATUS Receiver navigation status (Periodic/polled) NAV_TIMEBDS BeiDou time solution (Periodic/polled) NAV_TIMEGAL Galileo time solution (Periodic/polled) NAV_TIMEGLO GLONASS time solution (Periodic/polled) NAV_TIMEGPS GPS time solution (Periodic/polled) NAV_TIMELS Leap second event information (Periodic/polled) NAV_TIMEQZSS QZSS time solution (Periodic/polled) NAV_TIMEUTC UTC time solution (Periodic/polled) NAV_VELECEF Velocity solution in ECEF (Periodic/polled) NAV_VELNED Velocity solution in NED frame (Periodic/polled) RXM_COR Differential correction input status (Output) RXM_MEASX Satellite measurements for RRLP (Periodic/polled) RXM_PMREQ Power management request (Command) RXM_RAWX Multi-GNSS raw measurements (Periodic/polled) RXM_RLM Galileo SAR short-RLM or long-RLM report (Output) RXM_RTCM RTCM input status (Output) RXM_SFRBX Broadcast navigation data subframe (Output) RXM_SPARTN SPARTN input status (Output) SEC_SIG Signal security information (Periodic/polled) SEC_UNIQID Unique chip ID (Output) TIM_TM2 Time mark data (Periodic/polled) TIM_TP Time pulse time data (Periodic/polled) TIM_VRFY Sourced time verification (Periodic/polled) UPD_SOS Create, clear, or restore backup (Poll request/command/output)"
  },
  "api/EmotionalCities.uBlox.PortInputProtocols.html": {
    "href": "api/EmotionalCities.uBlox.PortInputProtocols.html",
    "title": "Enum PortInputProtocols",
    "keywords": "Enum PortInputProtocols Specifies which input protocols are active in a specified UART port. Namespace : EmotionalCities.uBlox Assembly : EmotionalCities.uBlox.dll Syntax [Flags] public enum PortInputProtocols : ushort Fields Name Description Nmea The NMEA protocol. Ubx The UBX protocol."
  },
  "api/EmotionalCities.uBlox.PortOutputProtocols.html": {
    "href": "api/EmotionalCities.uBlox.PortOutputProtocols.html",
    "title": "Enum PortOutputProtocols",
    "keywords": "Enum PortOutputProtocols Specifies which output protocols are active in a specified UART port. Namespace : EmotionalCities.uBlox Assembly : EmotionalCities.uBlox.dll Syntax [Flags] public enum PortOutputProtocols : ushort Fields Name Description Nmea The NMEA protocol. Ubx The UBX protocol."
  },
  "api/EmotionalCities.uBlox.UartPort.html": {
    "href": "api/EmotionalCities.uBlox.UartPort.html",
    "title": "Enum UartPort",
    "keywords": "Enum UartPort Specifies the UART port identifier number. Namespace : EmotionalCities.uBlox Assembly : EmotionalCities.uBlox.dll Syntax public enum UartPort : byte Fields Name Description I2C UART protocol over I2C. Spi UART protocol over SPI. Uart1 UART port 1. Uart2 UART port 2. Usb UART over USB transport."
  },
  "api/EmotionalCities.uBlox.UbxException.html": {
    "href": "api/EmotionalCities.uBlox.UbxException.html",
    "title": "Class UbxException",
    "keywords": "Class UbxException Represents errors that are reported by UBX devices at runtime. Inheritance Object Exception UbxException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.uBlox Assembly : EmotionalCities.uBlox.dll Syntax [Serializable] public sealed class UbxException : Exception, _Exception, ISerializable Constructors | Improve this Doc View Source UbxException() Initializes a new instance of the UbxException class. Declaration public UbxException() | Improve this Doc View Source UbxException(String) Initializes a new instance of the UbxException class with a specified error message. Declaration public UbxException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source UbxException(String, Exception) Initializes a new instance of the UbxException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public UbxException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.InteropServices._Exception System.Runtime.Serialization.ISerializable"
  },
  "api/EmotionalCities.uBlox.UbxPacket.html": {
    "href": "api/EmotionalCities.uBlox.UbxPacket.html",
    "title": "Class UbxPacket",
    "keywords": "Class UbxPacket Represents a single message in the UBX protocol. Inheritance Object UbxPacket Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.uBlox Assembly : EmotionalCities.uBlox.dll Syntax public class UbxPacket Constructors | Improve this Doc View Source UbxPacket(Boolean, Byte[]) Initializes a new instance of the UbxPacket class from the full binary representation of the UBX message, and optionally updates the value of the checksum byte. Declaration public UbxPacket(bool updateChecksum, params byte[] messageBytes) Parameters Type Name Description Boolean updateChecksum Indicates whether to compute and update the checksum byte. Byte [] messageBytes An array of bytes containing the full binary representation of the UBX message. Exceptions Type Condition ArgumentNullException messageBytes is null . | Improve this Doc View Source UbxPacket(Byte[]) Initializes a new instance of the UbxPacket class from the full binary representation of the UBX message. Declaration public UbxPacket(params byte[] messageBytes) Parameters Type Name Description Byte [] messageBytes An array of bytes containing the full binary representation of the UBX message. Exceptions Type Condition ArgumentNullException messageBytes is null . Properties | Improve this Doc View Source Checksum Gets the checksum bytes used for error detection in the UBX protocol. Declaration public ushort Checksum { get; } Property Value Type Description UInt16 | Improve this Doc View Source MessageBytes Gets the full binary representation of the UBX message. Declaration public byte[] MessageBytes { get; } Property Value Type Description Byte [] | Improve this Doc View Source MessageClass Gets a value specifying the class ID of the UBX message. Declaration public MessageClass MessageClass { get; } Property Value Type Description MessageClass | Improve this Doc View Source MessageId Gets a value specifying the ID of the UBX message. Declaration public MessageId MessageId { get; } Property Value Type Description MessageId | Improve this Doc View Source PayloadLength Gets the length of the payload, in bytes. Declaration public int PayloadLength { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source FromPayload(MessageId, Byte[]) Returns a UbxPacket with the specified ID and binary payload. Declaration public static UbxPacket FromPayload(MessageId messageId, params byte[] payload) Parameters Type Name Description MessageId messageId The ID of the UBX message. Byte [] payload The array containing the binary message payload data. Returns Type Description UbxPacket A UbxPacket instance with the specified ID and binary payload, including all necessary UBX headers and checksum. | Improve this Doc View Source GetPayload() Gets the array segment containing the raw message payload. This method returns a view into the original array without copying any data. Declaration public ArraySegment<byte> GetPayload() Returns Type Description ArraySegment < Byte > An ArraySegment<T> delimiting the message payload section of the message bytes. | Improve this Doc View Source GetPayloadArray<TArray>() Returns the message payload as an array of non-pointer value types. The size of the type should be a multiple of the total size of the payload. Declaration public TArray[] GetPayloadArray<TArray>() where TArray : struct Returns Type Description TArray[] An array containing a copy of the message payload data. Type Parameters Name Description TArray The type of the non-pointer values in the array. | Improve this Doc View Source ToString() Returns a String that represents the UBX message ID and payload length. Declaration public override string ToString() Returns Type Description String A formatted String representing the UBX message ID and payload length. Overrides Object.ToString()"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting Started",
    "keywords": "Getting Started Download Bonsai . From the package manager, search and install the Emotional Cities - uBlox package."
  },
  "index.html": {
    "href": "index.html",
    "title": "Emotional Cities - uBlox Documentation",
    "keywords": "Emotional Cities - uBlox Documentation Bonsai library for data acquisition and control of u-blox GPS modules using the UBX protocol. Warning These docs are under active development, feel free to contribute by either raising an issue or following the links to Improve this Doc . This package was developed for the eMOTIONAL CITIES Project, which received funding from European Union’s Horizon 2020 research and innovation programme, under the grant agreement No 945307. The eMOTIONAL CITIES Project is a consortium of 12 partners co-coordinated by IGOT and FMUL, taking place between 2021 and 2025. More information at https://emotionalcities-h2020.eu/"
  }
}